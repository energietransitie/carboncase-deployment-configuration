version: "3.9"
services:

  app-database-tst:
    container_name: carboncase-db-tst
    image: mcr.microsoft.com/mssql/server:2019-latest
    restart: unless-stopped
    volumes:
      - data:/data:/var/opt/mssql
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}

  app-tst:
    container_name: carboncase-app-tst
    image: ghcr.io/energietransitie/carboncase-frontend:dev
    restart: unless-stopped
    labels:
      - traefik.http.routers.carboncase-app-tst.rule=Host(`app.carboncase.tst.energietransitiewindesheim.nl`)
      - traefik.http.routers.carboncase-app-tst.tls=true
      - traefik.http.routers.carboncase-app-tst.tls.certresolver=lets-encrypt
      - traefik.http.services.carboncase-app-tst.loadbalancer.server.port=80
      - com.centurylinklabs.watchtower.enable=true
      - com.centurylinklabs.watchtower.scope=carboncase-tst
    # environment:
    #   - KEY=val
    networks:
      - web
    depends_on:
      - app-api-tst

  app-api-tst:
    container_name: carboncase-app-api-tst
    image: ghcr.io/energietransitie/carboncase-api:dev
    restart: unless-stopped
    labels:
      - traefik.http.routers.carboncase-app-api-tst.rule=Host(`api.app.carboncase.tst.energietransitiewindesheim.nl`)
      - traefik.http.routers.carboncase-app-api-tst.tls=true
      - traefik.http.routers.carboncase-app-api-tst.tls.certresolver=lets-encrypt
      - traefik.http.services.carboncase-app-api-tst.loadbalancer.server.port=5000
      - com.centurylinklabs.watchtower.enable=true
      - com.centurylinklabs.watchtower.scope=carboncase-tst
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
      - ASPNETCORE_URLS=http://+:5000 # neccessary to ensure it runs on the correct port, which is also exposed by docker
      - DbDatabase=${DB_DATABASE}
      - DbPassword=${DB_PASSWORD}
      - DbServer=carboncase-db-tst,1433
      - DbUser=${DB_USER}
      - JwtBearerSecretKey=${JwtBearerSecretKey} # For signage of JWT tokens
    networks:
      - default
      - web
    depends_on:
      - app-database-tst

  management-tst:
    container_name: carboncase-management-tst
    image: ghcr.io/energietransitie/carboncase-management:dev
    restart: unless-stopped
    labels:
      - traefik.http.routers.carboncase-management-tst.rule=Host(`dash.carboncase.tst.energietransitiewindesheim.nl`)
      - traefik.http.routers.carboncase-management-tst.tls=true
      - traefik.http.routers.carboncase-management-tst.tls.certresolver=lets-encrypt
      - traefik.http.services.carboncase-management-tst.loadbalancer.server.port=80
      - com.centurylinklabs.watchtower.enable=true
      - com.centurylinklabs.watchtower.scope=carboncase-tst
    # environment:
    #   - KEY=val
    networks:
      - web
    depends_on:
      - management-api-tst

  management-api-tst:
    container_name: carboncase-management-api-tst
    image: ghcr.io/energietransitie/carboncase-management-api:dev
    restart: unless-stopped
    labels:
      - traefik.http.routers.carboncase-management-api-tst.rule=Host(`api.dash.carboncase.tst.energietransitiewindesheim.nl`)
      - traefik.http.routers.carboncase-management-api-tst.tls=true
      - traefik.http.routers.carboncase-management-api-tst.tls.certresolver=lets-encrypt
      - traefik.http.services.carboncase-management-api-tst.loadbalancer.server.port=5002
      - com.centurylinklabs.watchtower.enable=true
      - com.centurylinklabs.watchtower.scope=carboncase-tst
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
      - ASPNETCORE_URLS=http://+:5002 # neccessary to ensure it runs on the correct port, which is also exposed by docker
      - DbDatabase=${DB_DATABASE}
      - DbPassword=${DB_PASSWORD}
      - DbServer=carboncase-db-tst,1433
      - DbUser=${DB_USER}
      - Authentication:JwtBearer:SecretKey=${JwtBearerSecretKey} # For signage of JWT tokens
      - Email:User=${EMAIL_USER}
      - Email:Password=${EMAIL_PASSWORD}
      - Email:DisplayName=${EMAIL_DISPLAY_NAME}
    networks:
      - default
      - web
    depends_on:
      - app-database-tst
  
  watchtower:
    container_name: carboncase-watchtower
    image: containrrr/watchtower:1.5.1
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.docker/config.json:/config.json
    labels:
      - traefik.http.routers.carboncase-watchtower.rule=Host(`deploy.carboncase.tst.energietransitiewindesheim.nl`)
      - traefik.http.routers.carboncase-watchtower.tls=true
      - traefik.http.routers.carboncase-watchtower.tls.certresolver=lets-encrypt
      - traefik.http.services.carboncase-watchtower.loadbalancer.server.port=8080
      - com.centurylinklabs.watchtower.scope=carboncase-tst
    environment:
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_SCOPE=carboncase-tst
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_ROLLING_RESTART=true
      - WATCHTOWER_HTTP_API_UPDATE=true
      - WATCHTOWER_HTTP_API_TOKEN=${WATCHTOWER_HTTP_API_TOKEN}

volumes:
  data: {}

networks:
  web:
    external: true